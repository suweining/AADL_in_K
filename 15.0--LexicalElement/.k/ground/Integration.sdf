module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

exports

context-free syntax
context-free priorities
{
	"notBool" Bool -> Bool {left, cons("Bool10Syn")}
} > {
	Bool "andBool" Bool -> Bool {left, cons("Bool12Syn")}
	Bool "andThenBool" Bool -> Bool {left, cons("Bool13Syn")}
} > {
	Bool "xorBool" Bool -> Bool {left, cons("Bool14Syn")}
} > {
	Bool "orBool" Bool -> Bool {left, cons("Bool15Syn")}
	Bool "orElseBool" Bool -> Bool {left, cons("Bool16Syn")}
} > {
	Bool "impliesBool" Bool -> Bool {left, cons("Bool17Syn")}
} > { left:
	Bool "==Bool" Bool -> Bool {left, cons("Bool18Syn")}
	Bool "=/=Bool" Bool -> Bool {left, cons("Bool19Syn")}
}

context-free priorities
{ right:
	"~Int" Int -> Int {right, cons("Int120Syn")}
} > { left:
	Int "^Int" Int -> Int {left, cons("Int122Syn")}
} > { left:
	Int "*Int" Int -> Int {left, cons("Int123Syn")}
	Int "/Int" Int -> Int {left, cons("Int124Syn")}
	Int "%Int" Int -> Int {left, cons("Int125Syn")}
	Int "divInt" Int -> Int {left, cons("Int126Syn")}
	Int "modInt" Int -> Int {left, cons("Int127Syn")}
} > { left:
	Int "+Int" Int -> Int {left, cons("Int1PlusSyn")}
	Int "-Int" Int -> Int {left, cons("Int128Syn")}
} > { left:
	Int ">>Int" Int -> Int {left, cons("Int129Syn")}
	Int "<<Int" Int -> Int {left, cons("Int130Syn")}
} > { left:
	Int "&Int" Int -> Int {left, cons("Int132Syn")}
} > { left:
	Int "xorInt" Int -> Int {left, cons("Int133Syn")}
} > { left:
	Int "|Int" Int -> Int {left, cons("Int134Syn")}
}

context-free priorities
{
	Float "^Float" Float -> Float {left, cons("Float149Syn")}
} > { left:
	Float "*Float" Float -> Float {left, cons("Float150Syn")}
	Float "/Float" Float -> Float {left, cons("Float152Syn")}
	Float "%Float" Float -> Float {left, cons("Float153Syn")}
} > { left:
	Float "+Float" Float -> Float {left, cons("Float154Syn")}
	Float "-Float" Float -> Float {left, cons("Float155Syn")}
}

context-free priorities
{ left:
	Float "<=Float" Float -> Bool {left, cons("Bool156Syn")}
	Float "<Float" Float -> Bool {left, cons("Bool157Syn")}
	Float ">=Float" Float -> Bool {left, cons("Bool158Syn")}
	Float ">Float" Float -> Bool {left, cons("Bool159Syn")}
	Float "==Float" Float -> Bool {left, cons("Bool160Syn")}
	Float "=/=Float" Float -> Bool {left, cons("Bool162Syn")}
}

context-free priorities
{ left:
	K "==K" K -> Bool {cons("Bool1200Syn")}
	K "=/=K" K -> Bool {cons("Bool1202Syn")}
}

%% subsorts 1
context-free priorities
{
	Numeral -> K
	LetterOrDdigit -> K
	NoneStatement -> K
	CapitalizedId -> K
	Array -> K
	GraphicCharacter -> K
	TCPAnswer -> K
	DzFloat -> K
	DzString -> K
	Numberal -> K
	NonEndOfLineCharacterList -> K
	Exponent -> K
	StringElementList -> K
	DdecimalRealLiteral -> K
	DdecimalIntegerLiteral -> K
	PrositiveExponent -> K
	Int -> K
	Identifier -> K
	DzBool -> K
	BasedNumberal -> K
	SpaceCharacter -> K
	ExtendedDdigit -> K
	Variable -> K
	Comment -> K
	Char -> K
	NonEndOfLineCharacter -> K
	String -> K
	IdentifierLeter -> K
	SpecialCharacter -> K
	Id -> K
	Base -> K
	Bool -> K
	IdentifierLetter -> K
	OtherControlCharacter -> K
	NumericLiteral -> K
	DzId -> K
	FormatEffector -> K
	DzInt -> K
	RealLiteral -> K
	Ddigit -> K
	DdigitList -> K
	StringLiteral -> K
	Float -> K
	Nat -> K
	BasedIntegerLiteral -> K
	StringElement -> K
	Character -> K
	NonQuotationMarkGraphicCharacter -> K
	ExtendedDdigitList -> K
	IntegerLiteral -> K
	UnderLine -> K
	LetterOrDdigitList -> K
} > {
	DdecimalRealLiteral -> RealLiteral
	OtherControlCharacter -> Character
	IntegerLiteral -> NumericLiteral
	String -> TCPAnswer
	SpecialCharacter -> GraphicCharacter
	DdecimalIntegerLiteral -> IntegerLiteral
	NoneStatement -> NonEndOfLineCharacterList
	DzFloat -> Float
	NoneStatement -> StringElementList
	RealLiteral -> NumericLiteral
	Ddigit -> Numeral
	Ddigit -> ExtendedDdigit
	DzBool -> Bool
	NoneStatement -> ExtendedDdigitList
	Ddigit -> DdigitList
	FormatEffector -> Character
	Ddigit -> LetterOrDdigit
	DzId -> Id
	Id -> Variable
	LetterOrDdigit -> LetterOrDdigitList
	NoneStatement -> LetterOrDdigitList
	Ddigit -> GraphicCharacter
	NonQuotationMarkGraphicCharacter -> StringElement
	DzString -> String
	DzInt -> Int
	StringElement -> StringElementList
	SpaceCharacter -> GraphicCharacter
	GraphicCharacter -> Character
	IdentifierLetter -> GraphicCharacter
	NoneStatement -> DdigitList
	NonEndOfLineCharacter -> NonEndOfLineCharacterList
	IdentifierLetter -> LetterOrDdigit
	BasedIntegerLiteral -> IntegerLiteral
	ExtendedDdigit -> ExtendedDdigitList
	Ddigit -> Base
	Numeral -> DdecimalIntegerLiteral
} > {
	K -> Numeral
	K -> LetterOrDdigit
	K -> NoneStatement
	K -> CapitalizedId
	K -> Array
	K -> GraphicCharacter
	K -> TCPAnswer
	K -> DzFloat
	K -> DzString
	K -> Numberal
	K -> NonEndOfLineCharacterList
	K -> Exponent
	K -> StringElementList
	K -> DdecimalRealLiteral
	K -> DdecimalIntegerLiteral
	K -> PrositiveExponent
	K -> Int
	K -> Identifier
	K -> DzBool
	K -> BasedNumberal
	K -> SpaceCharacter
	K -> ExtendedDdigit
	K -> Variable
	K -> Comment
	K -> Char
	K -> NonEndOfLineCharacter
	K -> String
	K -> IdentifierLeter
	K -> SpecialCharacter
	K -> Id
	K -> Base
	K -> Bool
	K -> IdentifierLetter
	K -> OtherControlCharacter
	K -> NumericLiteral
	K -> DzId
	K -> FormatEffector
	K -> DzInt
	K -> RealLiteral
	K -> Ddigit
	K -> DdigitList
	K -> StringLiteral
	K -> Float
	K -> Nat
	K -> BasedIntegerLiteral
	K -> StringElement
	K -> Character
	K -> NonQuotationMarkGraphicCharacter
	K -> ExtendedDdigitList
	K -> IntegerLiteral
	K -> UnderLine
	K -> LetterOrDdigitList
}

%% subsorts 2
context-free priorities
{
	K -> Numeral
	K -> LetterOrDdigit
	K -> NoneStatement
	K -> CapitalizedId
	K -> Array
	K -> GraphicCharacter
	K -> TCPAnswer
	K -> DzFloat
	K -> DzString
	K -> Numberal
	K -> NonEndOfLineCharacterList
	K -> Exponent
	K -> StringElementList
	K -> DdecimalRealLiteral
	K -> DdecimalIntegerLiteral
	K -> PrositiveExponent
	K -> Int
	K -> Identifier
	K -> DzBool
	K -> BasedNumberal
	K -> SpaceCharacter
	K -> ExtendedDdigit
	K -> Variable
	K -> Comment
	K -> Char
	K -> NonEndOfLineCharacter
	K -> String
	K -> IdentifierLeter
	K -> SpecialCharacter
	K -> Id
	K -> Base
	K -> Bool
	K -> IdentifierLetter
	K -> OtherControlCharacter
	K -> NumericLiteral
	K -> DzId
	K -> FormatEffector
	K -> DzInt
	K -> RealLiteral
	K -> Ddigit
	K -> DdigitList
	K -> StringLiteral
	K -> Float
	K -> Nat
	K -> BasedIntegerLiteral
	K -> StringElement
	K -> Character
	K -> NonQuotationMarkGraphicCharacter
	K -> ExtendedDdigitList
	K -> IntegerLiteral
	K -> UnderLine
	K -> LetterOrDdigitList
} .> {
	Numeral -> K
	LetterOrDdigit -> K
	NoneStatement -> K
	CapitalizedId -> K
	Array -> K
	GraphicCharacter -> K
	TCPAnswer -> K
	DzFloat -> K
	DzString -> K
	Numberal -> K
	NonEndOfLineCharacterList -> K
	Exponent -> K
	StringElementList -> K
	DdecimalRealLiteral -> K
	DdecimalIntegerLiteral -> K
	PrositiveExponent -> K
	Int -> K
	Identifier -> K
	DzBool -> K
	BasedNumberal -> K
	SpaceCharacter -> K
	ExtendedDdigit -> K
	Variable -> K
	Comment -> K
	Char -> K
	NonEndOfLineCharacter -> K
	String -> K
	IdentifierLeter -> K
	SpecialCharacter -> K
	Id -> K
	Base -> K
	Bool -> K
	IdentifierLetter -> K
	OtherControlCharacter -> K
	NumericLiteral -> K
	DzId -> K
	FormatEffector -> K
	DzInt -> K
	RealLiteral -> K
	Ddigit -> K
	DdigitList -> K
	StringLiteral -> K
	Float -> K
	Nat -> K
	BasedIntegerLiteral -> K
	StringElement -> K
	Character -> K
	NonQuotationMarkGraphicCharacter -> K
	ExtendedDdigitList -> K
	IntegerLiteral -> K
	UnderLine -> K
	LetterOrDdigitList -> K
}
context-free syntax
	DdecimalRealLiteral -> RealLiteral {}
	"#" K -> KLabel {cons("KLabel1279Syn")}
	"#string2Int" "(" K ")" -> K {cons("K1399Syn")}
	Map "=/=Map" Map -> Bool {cons("Bool1209Syn")}
	K "inVars" K -> Bool {cons("Bool1299Syn")}
	"#flush" "(" Int ")" -> K {cons("K1387Syn")}
	"String2Int" "(" String ")" -> Int {cons("Int176Syn")}
	Int "=/=Int" Int -> Bool {left, cons("Bool144Syn")}
	"#substMap" "(" Map ")" -> K {cons("K1338Syn")}
	"#isTCPError" "(" String ")" -> Bool {cons("Bool1234Syn")}
	Ddigit -> Numeral {}
	"#tcpError" "(" String ")" -> TCPAnswer {cons("TCPAnswer1228Syn")}
	IdentifierLeter LetterOrDdigitList -> Identifier {cons("Identifier1426Syn")}
	FormatEffector -> Character {}
	"#fReadChar" "(" Int ")" -> K {cons("K1402Syn")}
	"lengthString" "(" String ")" -> Int {cons("Int167Syn")}
	"getVariables" "(" K ")" -> Set {cons("Set1289Syn")}
	"#noIO" -> List {cons("List1408Syn")}
	"#stdout" -> Int {cons("Int1393Syn")}
	Ddigit -> LetterOrDdigit {}
	"#patternMatch" "(" ListDlKDr "," ListDlKDr ")" -> K {cons("K1285Syn")}
	"isVariable" "(" Map ")" -> Bool {cons("Bool1363Syn")}
	"#tell" "(" Int ")" -> K {cons("K1380Syn")}
	String "==String" String -> Bool {left, cons("Bool166Syn")}
	"#readChar" "(" ")" -> K {cons("K1400Syn")}
	"Set2KTerm" "(" Set ")" -> K {cons("K1259Syn")}
	"#changeLabel" "(" K "," K ")" -> K {cons("K1347Syn")}
	K "[" Map "]" -> K {cons("K1326Syn")}
	SpaceCharacter -> GraphicCharacter {}
	"#if" Bool "#then" K "#else" K "#fi" -> K {cons("K1203Syn")}
	"isVariable" "(" Bag ")" -> Bool {cons("Bool1362Syn")}
	NoneStatement -> DdigitList {}
	"Celllabel2K" CellLabel -> K {cons("K1273Syn")}
	"Set2KLabel" Set -> KLabel {cons("KLabel1267Syn")}
	"##tcpRequest" "(" String ")" -> String {cons("String1232Syn")}
	"#substitutePlainList1" "(" K "," Map "," ListDlKDr ")" -> K {cons("K1345Syn")}
	"#tcpRequest" "(" String ")" -> TCPAnswer {cons("TCPAnswer1229Syn")}
	"#boundVars1" "(" K ")" -> K {cons("K1302Syn")}
	"charString" "(" Int ")" -> String {cons("String168Syn")}
	"#buffer" "(" K ")" -> List {cons("List1IOBufferSyn")}
	ListDlKDr "=/=List{K}" ListDlKDr -> Bool {cons("Bool1222Syn")}
	"vars" "(" Set ")" -> K {cons("K1287Syn")}
	Int -> K {}
	Int "==Int" Int -> Bool {left, cons("Bool143Syn")}
	RealLiteral -> NumericLiteral {}
	Ddigit Ddigit -> Base {cons("Base1442Syn")}
	K "inList{K}" ListDlKDr -> Bool {cons("Bool1238Syn")}
	Ddigit DdigitList -> Numeral {cons("Numeral1433Syn")}
	"exists" Set "." Bool -> Bool {cons("Bool1349Syn")}
	DzBool -> Bool {}
	"minInt" "(" Int "," Int ")" -> Int {cons("Int135Syn")}
	"\"" StringElementList "\"" -> StringLiteral {cons("StringLiteral1464Syn")}
	"Int2String" "(" Int ")" -> String {cons("String177Syn")}
	NoneStatement -> ExtendedDdigitList {}
	Ddigit -> DdigitList {}
	"#fPutByte" "(" Int "," Int ")" -> K {cons("K1386Syn")}
	"Map2K" Map -> K {cons("K1278Syn")}
	ExtendedDdigitList ExtendedDdigitList -> ExtendedDdigitList {cons("ExtendedDdigitList1445Syn")}
	"#eval" Map -> Bag {cons("Bag1EvalSyn")}
	"#eof" "(" ")" -> K {cons("K1398Syn")}
	"#printChar" "(" K ")" -> K {cons("K1404Syn")}
	"#isMapInK" "(" K ")" -> Bool {cons("Bool1250Syn")}
	"#freshSym" "(" K ")" -> K {cons("K1375Syn")}
	"#isDigit" "(" Char ")" -> Bool {cons("Bool197Syn")}
	"#substituteK" "(" K "," K ")" -> K {cons("K1327Syn")}
	"isBuiltin" "(" K ")" -> Bool {cons("Bool1357Syn")}
	"SMTCall" "(" String ")" -> String {cons("String1355Syn")}
	"#binderSplit1" "(" KLabel "," Int "," ListDlKDr "," ListDlKDr "," ListDlKDr "," Set ")" -> K {cons("K1304Syn")}
	"#removeCharsUponAck" "(" Int ")" -> List {cons("List1406Syn")}
	"rfindString" "(" String "," String "," Int ")" -> Int {cons("Int173Syn")}
	Int ">=Int" Int -> Bool {left, cons("Bool140Syn")}
	"asciiString" "(" String ")" -> Int {cons("Int169Syn")}
	"#freeVars" "(" ListDlKDr ")" -> K {cons("K1308Syn")}
	"checkSat" "(" Bool ")" -> String {cons("String1356Syn")}
	KLabel "==KLabel" KLabel -> Bool {cons("Bool1223Syn")}
	"freshVariables" "(" Set "," K ")" -> K {cons("K1346Syn")}
	"#ostream" "(" Int ")" -> List {cons("List1OutputStreamSyn")}
	" " -> NoneStatement {cons("NoneStatement1473Syn")}
	"isBound" "(" KLabel "," Int ")" -> Bool {cons("Bool1296Syn")}
	Int "<=Int" Int -> Bool {left, cons("Bool138Syn")}
	"getMatching" "(" ListDlKDr "," ListDlKDr ")" -> Map {cons("Map1283Syn")}
	"#substitute" "(" K "," Map ")" -> K {cons("K1328Syn")}
	ExtendedDdigit ExtendedDdigitList -> BasedNumberal {cons("BasedNumberal1443Syn")}
	"K2SMTLib" "(" K ")" -> String {cons("String1350Syn")}
	"#fReadByte" "(" Int ")" -> K {cons("K1388Syn")}
	List "=/=List" List -> Bool {cons("Bool1226Syn")}
	"lengthList" List -> Int {cons("Int1262Syn")}
	K "in" Set -> Bool {cons("Bool1254Syn")}
	OtherControlCharacter -> Character {}
	"isEmptySet" "(" Set ")" -> Bool {cons("Bool1258Syn")}
	Int "<Int" Int -> Bool {left, cons("Bool139Syn")}
	"#parseToken" "(" String "," String ")" -> K {cons("K198Syn")}
	DzFloat -> Float {}
	"#substituteBinder" "(" K "," Map "," K ")" -> K {cons("K1333Syn")}
	"#fPeekByte" "(" Int ")" -> K {cons("K1383Syn")}
	Map "(" K ")" -> K {cons("K1240Syn")}
	Numeral PrositiveExponent -> DdecimalIntegerLiteral {cons("DdecimalIntegerLiteral1432Syn")}
	StringElementList StringElementList -> StringElementList {cons("StringElementList1465Syn")}
	"#ioError" "(" String ")" -> K {cons("K1385Syn")}
	"#freshSymSort" "(" String ")" -> K {cons("K1373Syn")}
	"#putByte" "(" Int ")" -> K {cons("K1397Syn")}
	"select" "(" Array "," Int ")" -> KResult {cons("KResult148Syn")}
	"isSymbolicList" "(" List ")" -> K {cons("K1366Syn")}
	"#freeVars" "(" ListDlKDr "," Set "," Set ")" -> K {cons("K1309Syn")}
	"dummyNat" -> Nat {cons("Nat146Syn")}
	NoneStatement -> LetterOrDdigitList {}
	"#freshSubst" "(" Set "," Set "," Map ")" -> K {cons("K1337Syn")}
	List "==List" List -> Bool {cons("Bool1225Syn")}
	"isMatching" "(" ListDlKDr "," ListDlKDr ")" -> Bool {cons("Bool1282Syn")}
	"#freeVarsBinder1" "(" K "," Set ")" -> K {cons("K1323Syn")}
	Set "=/=Set" Set -> Bool {cons("Bool1206Syn")}
	"Map" "(" ListDlKDr "|->" ListDlKDr ")" -> Map {cons("Map1243Syn")}
	"not define" -> IdentifierLetter {cons("IdentifierLetter1409Syn")}
	"List{K}2K" ListDlKDr -> K {cons("K1274Syn")}
	"fresh" "(" K ")" -> Bool {cons("Bool1FreshSyn")}
	"#open" "(" String ")" -> K {cons("K1376Syn")}
	"absInt" "(" Int ")" -> Int {cons("Int137Syn")}
	"#freshSubst1" "(" Set "," Set "," Map "," K "," K ")" -> K {cons("K1342Syn")}
	String ">=String" String -> String {cons("String194Syn")}
	K "#inList{K}" ListDlKDr -> Bool {cons("Bool1239Syn")}
	"A-Dummy-Capitalized-Id-Just-Because-We-Do-Not-Allow-Empty-Productions-Yet" -> CapitalizedId {cons("CapitalizedId199Syn")}
	"decomposeMatching" "(" ListDlKDr "," ListDlKDr ")" -> ListDlKDr {cons("ListDlKDr1284Syn")}
	"#substituteList1" "(" K "," Map "," K "," ListDlKDr ")" -> K {cons("K1332Syn")}
	Map "==Map" Map -> Bool {cons("Bool1208Syn")}
	"keys" Map -> Set {cons("Set1245Syn")}
	DdigitList DdigitList -> DdigitList {cons("DdigitList1435Syn")}
	"Bag2K" Bag -> K {cons("K1276Syn")}
	"#parse" "(" String "," K ")" -> List {cons("List1ParseSyn")}
	NoneStatement -> NonEndOfLineCharacterList {}
	"#freshSymN" "(" K "," Int ")" -> K {cons("K1374Syn")}
	"#evalHelper" Map -> Bag {cons("Bag1EvalHelperSyn")}
	"not define" -> NonEndOfLineCharacter {cons("NonEndOfLineCharacter1470Syn")}
	"Vars2SMTLib" "(" Set ")" -> String {cons("String1352Syn")}
	Base "#" BasedNumberal "#" PrositiveExponent -> BasedIntegerLiteral {cons("BasedIntegerLiteral1440Syn")}
	"not define" -> UnderLine {cons("UnderLine1430Syn")}
	"intersectSet" "(" Set "," Set ")" -> Set {cons("Set1257Syn")}
	"#freshVar" "(" K "," Set ")" -> K {cons("K1293Syn")}
	"#rebind2" "(" K "," Int "," Map "," K ")" -> K {cons("K1340Syn")}
	"isLocalFreshVar" "(" K ")" -> Bool {cons("Bool1295Syn")}
	"K2Sort" "(" K ")" -> String {cons("String1365Syn")}
	"Int2Float" "(" Int ")" -> Float {cons("Float163Syn")}
	"#fPutBytes" "(" Int "," String ")" -> K {cons("K1389Syn")}
	"isVariable" "(" Set ")" -> Bool {cons("Bool1360Syn")}
	"isKLabelConstant" "(" KLabel ")" -> Bool {cons("Bool1364Syn")}
	ListDlKDr "==List{K}" ListDlKDr -> Bool {cons("Bool1220Syn")}
	"not define " -> OtherControlCharacter {cons("OtherControlCharacter1425Syn")}
	"String2KLabel" "(" String ")" -> KLabel {cons("KLabel1String2KLabelSyn")}
	"#freeVarsBinder2" "(" K "," K ")" -> K {cons("K1324Syn")}
	Id -> Variable {}
	"#stderr" -> Int {cons("Int1394Syn")}
	Ddigit -> GraphicCharacter {}
	"#getVarsFromK" "(" K ")" -> Set {cons("Set1288Syn")}
	NonQuotationMarkGraphicCharacter -> StringElement {}
	"#getSymLabel" "(" String ")" -> K {cons("K1370Syn")}
	Set "==Set" Set -> Bool {cons("Bool1205Syn")}
	"String2Id" "(" String ")" -> Id {cons("Id179Syn")}
	"Float2String" "(" Float ")" -> String {cons("String174Syn")}
	GraphicCharacter -> Character {}
	"#getVars1" "(" ListDlKDr "," Set ")" -> K {cons("K1292Syn")}
	"dummy-this-Variable-needed-only-to-declare-sort" -> Variable {cons("Variable1358Syn")}
	"Map2KLabel" Map -> KLabel {cons("KLabel1269Syn")}
	String -> K {}
	"Consts2SMTLib" "(" Set ")" -> String {cons("String1353Syn")}
	"store" "(" Array "," Int "," K ")" -> Array {cons("Array147Syn")}
	"Set2KTermAcc" "(" Set "," K ")" -> K {cons("K1260Syn")}
	"isSymbolicBag" "(" Bag ")" -> K {cons("K1368Syn")}
	String "+String" String -> String {left, cons("String165Syn")}
	"-" NonEndOfLineCharacterList -> Comment {cons("Comment1468Syn")}
	String ">String" String -> String {cons("String193Syn")}
	"Bag2KLabel" Bag -> KLabel {cons("KLabel1266Syn")}
	"#boundVars" "(" K ")" -> K {cons("K1300Syn")}
	Map "[" ListDlKDr "/" ListDlKDr "]" -> Map {cons("Map1244Syn")}
	Int ">Int" Int -> Bool {left, cons("Bool142Syn")}
	Base "#" BasedNumberal "#" -> BasedIntegerLiteral {cons("BasedIntegerLiteral1439Syn")}
	UnderLine LetterOrDdigit -> LetterOrDdigitList {cons("LetterOrDdigitList1428Syn")}
	"String2DotK" "(" String ")" -> K {cons("K1390Syn")}
	"dummyChar" -> Char {cons("Char195Syn")}
	"#freeVarsBinder" "(" K "," Set ")" -> K {cons("K1322Syn")}
	DzString -> String {}
	"#fPrintChar" "(" Int "," K ")" -> K {cons("K1405Syn")}
	"isSymbolicSet" "(" Set ")" -> K {cons("K1367Syn")}
	"SMTLibQuery" "(" Bool ")" -> String {cons("String1354Syn")}
	"isVariable" "(" List ")" -> Bool {cons("Bool1359Syn")}
	NonEndOfLineCharacter -> NonEndOfLineCharacterList {}
	"#counter" -> Int {cons("Int1237Syn")}
	"none" -> NoneStatement {cons("NoneStatement1472Syn")}
	"#convertToken" "(" String "," String ")" -> List {cons("List1407Syn")}
	"not define" -> Ddigit {cons("Ddigit1420Syn")}
	IdentifierLetter -> LetterOrDdigit {}
	"List2KLabel" List -> KLabel {cons("KLabel1268Syn")}
	"#rebind" "(" K "," K "," K "," K ")" -> K {cons("K1336Syn")}
	ExtendedDdigit -> ExtendedDdigitList {}
	Numeral -> DdecimalIntegerLiteral {}
	"#hasMapping" "(" Map "," K ")" -> Bool {cons("Bool1248Syn")}
	"CellLabel2KLabel" CellLabel -> KLabel {cons("KLabel1264Syn")}
	Map "<=Map" Map -> Bool {cons("Bool1207Syn")}
	"#freezer" K -> KLabel {cons("KLabel1280Syn")}
	IntegerLiteral -> NumericLiteral {}
	"#substituteBinder2" "(" K "," Map "," K "," K ")" -> K {cons("K1335Syn")}
	"#istream" "(" Int ")" -> List {cons("List1InputStreamSyn")}
	"#peekByte" "(" ")" -> K {cons("K1396Syn")}
	"#seek" "(" Int "," Int ")" -> K {cons("K1382Syn")}
	"isBounding" "(" KLabel "," Int ")" -> Bool {cons("Bool1297Syn")}
	NoneStatement -> StringElementList {}
	"#substituteBinder1" "(" K "," Map "," K "," K ")" -> K {cons("K1334Syn")}
	Numeral "." Numeral Exponent -> DdecimalRealLiteral {cons("DdecimalRealLiteral1460Syn")}
	String "<String" String -> String {cons("String190Syn")}
	"forall" Set "." Bool -> Bool {cons("Bool1348Syn")}
	"String2Bool" "(" String ")" -> K {cons("K1384Syn")}
	"getKLabel" K -> KLabel {cons("KLabel1270Syn")}
	"substrString" "(" String "," Int "," Int ")" -> String {cons("String170Syn")}
	"#readByte" "(" ")" -> K {cons("K1395Syn")}
	"#EOF" -> TCPAnswer {cons("TCPAnswer1227Syn")}
	Set "<=Set" Set -> Bool {cons("Bool1204Syn")}
	"#substitutePlainList" "(" K "," Map ")" -> K {cons("K1344Syn")}
	"Float2Int" "(" Float ")" -> Int {cons("Int164Syn")}
	"not define" -> IdentifierLeter {cons("IdentifierLeter1427Syn")}
	"List{K}2KLabel" ListDlKDr -> KLabel {cons("KLabel1265Syn")}
	"#substituteFV" "(" K "," Map "," K ")" -> K {cons("K1329Syn")}
	"maxInt" "(" Int "," Int ")" -> Int {cons("Int136Syn")}
	Set "-Set" Set -> Set {cons("Set1253Syn")}
	"#patternMatch1" "(" ListDlKDr "," Map ")" -> K {cons("K1286Syn")}
	"E" "+" Numberal -> PrositiveExponent {cons("PrositiveExponent1437Syn")}
	"not define" -> SpaceCharacter {cons("SpaceCharacter1422Syn")}
	"not define" -> SpecialCharacter {cons("SpecialCharacter1423Syn")}
	DzInt -> Int {}
	"#getVars" "(" K ")" -> K {cons("K1290Syn")}
	"E" "+" Numberal -> Exponent {cons("Exponent1463Syn")}
	Numeral "." Numeral -> DdecimalRealLiteral {cons("DdecimalRealLiteral1459Syn")}
	"#freeVars1" "(" ListDlKDr "," K "," Set "," Set ")" -> K {cons("K1320Syn")}
	Int "dividesInt" Int -> Bool {cons("Bool145Syn")}
	"freeVariables" "(" ListDlKDr ")" -> Set {cons("Set1306Syn")}
	String "=/=String" String -> Bool {left, cons("Bool189Syn")}
	"#retrieveTCPError" "(" String ")" -> String {cons("String1233Syn")}
	"#checkTCPAnswer" "(" String ")" -> TCPAnswer {cons("TCPAnswer1230Syn")}
	"#distinctCounter" "(" Int ")" -> Int {cons("Int1236Syn")}
	"Id2String" "(" Id ")" -> String {cons("String178Syn")}
	"E" Numberal -> Exponent {cons("Exponent1462Syn")}
	UnderLine Ddigit -> DdigitList {cons("DdigitList1434Syn")}
	String -> TCPAnswer {}
	"#freshSymSortN" "(" String "," Int ")" -> K {cons("K1372Syn")}
	K "[" ListDlKDr "/" ListDlKDr "]" -> K {cons("K1325Syn")}
	"E" Numberal -> PrositiveExponent {cons("PrositiveExponent1436Syn")}
	Ddigit -> ExtendedDdigit {}
	"not define" -> NonQuotationMarkGraphicCharacter {cons("NonQuotationMarkGraphicCharacter1467Syn")}
	"ltrim" "(" String ")" -> String {cons("String187Syn")}
	"countAllOccurences" "(" String "," String ")" -> Int {cons("Int185Syn")}
	UnderLine ExtendedDdigit -> ExtendedDdigitList {cons("ExtendedDdigitList1444Syn")}
	"KLabel2K" KLabel -> K {cons("K1272Syn")}
	"#substituteList" "(" K "," Map "," K ")" -> K {cons("K1330Syn")}
	"replaceFirst" "(" String "," String "," String ")" -> String {cons("String184Syn")}
	"#isWhiteSpace" "(" Char ")" -> Bool {cons("Bool196Syn")}
	KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1224Syn")}
	DzId -> Id {}
	"#charString" "(" K ")" -> K {cons("K1403Syn")}
	"trim" "(" String ")" -> String {cons("String186Syn")}
	LetterOrDdigit -> LetterOrDdigitList {}
	"\"" "\"" -> StringElement {cons("StringElement1466Syn")}
	"#getMapFromK" "(" K ")" -> Map {cons("Map1252Syn")}
	"randomRandom" "(" Int ")" -> Int {cons("Int1235Syn")}
	"KLabel2KLabel" KLabel -> KLabel {cons("KLabel1263Syn")}
	"not define" -> FormatEffector {cons("FormatEffector1424Syn")}
	"#map" "(" Map ")" -> K {cons("K1249Syn")}
	"#fEof" "(" Int ")" -> K {cons("K1379Syn")}
	StringElement -> StringElementList {}
	"#substitutePlain" "(" K "," Map ")" -> K {cons("K1343Syn")}
	"freeVariables" "(" Set ")" -> Set {cons("Set1307Syn")}
	"#rebind1" "(" K "," K ")" -> K {cons("K1339Syn")}
	String "<=String" String -> String {cons("String192Syn")}
	BasedIntegerLiteral -> IntegerLiteral {}
	"String2Float" "(" String ")" -> Float {cons("Float175Syn")}
	"e" -> ExtendedDdigit {cons("ExtendedDdigit1457Syn")}
	"#close" "(" Int ")" -> K {cons("K1378Syn")}
	"d" -> ExtendedDdigit {cons("ExtendedDdigit1456Syn")}
	Map "[" Map "]" -> Map {cons("Map1UpdateMapWithMapSyn")}
	"f" -> ExtendedDdigit {cons("ExtendedDdigit1458Syn")}
	DdecimalIntegerLiteral -> IntegerLiteral {}
	SpecialCharacter -> GraphicCharacter {}
	Map "[" "undef" "/" ListDlKDr "]" -> Map {cons("Map1242Syn")}
	"#splitedBinder" "(" ListDlKDr "," ListDlKDr "," Set ")" -> K {cons("K1298Syn")}
	"#binderSplit2" "(" KLabel "," Int "," ListDlKDr "," ListDlKDr "," ListDlKDr "," Set "," K ")" -> K {cons("K1305Syn")}
	"not define" -> Numberal {cons("Numberal1438Syn")}
	NonEndOfLineCharacterList NonEndOfLineCharacterList -> NonEndOfLineCharacterList {cons("NonEndOfLineCharacterList1469Syn")}
	"a" -> ExtendedDdigit {cons("ExtendedDdigit1453Syn")}
	"c" -> ExtendedDdigit {cons("ExtendedDdigit1455Syn")}
	"b" -> ExtendedDdigit {cons("ExtendedDdigit1454Syn")}
	SetItem "in" Set -> Bool {cons("Bool1255Syn")}
	"#freshVar1" "(" Set "," K ")" -> K {cons("K1294Syn")}
	Float -> K {}
	KResult -> K {}
	"values" Map -> Set {cons("Set1246Syn")}
	"F" -> ExtendedDdigit {cons("ExtendedDdigit1452Syn")}
	"E" -> ExtendedDdigit {cons("ExtendedDdigit1450Syn")}
	"D" -> ExtendedDdigit {cons("ExtendedDdigit1449Syn")}
	"replace" "(" String "," String "," String "," Int ")" -> String {cons("String183Syn")}
	"KLabel2String" "(" KLabel ")" -> String {cons("String180Syn")}
	LetterOrDdigitList LetterOrDdigitList -> LetterOrDdigitList {cons("LetterOrDdigitList1429Syn")}
	"C" -> ExtendedDdigit {cons("ExtendedDdigit1448Syn")}
	K "#inSet" Set -> Bool {cons("Bool1256Syn")}
	"B" -> ExtendedDdigit {cons("ExtendedDdigit1447Syn")}
	"A" -> ExtendedDdigit {cons("ExtendedDdigit1446Syn")}
	"replaceAll" "(" String "," String "," String ")" -> String {cons("String182Syn")}
	IdentifierLetter -> GraphicCharacter {}
	"Set2K" Set -> K {cons("K1275Syn")}
	"#binderSplit" "(" K ")" -> K {cons("K1303Syn")}
	"#stdin" -> Int {cons("Int1392Syn")}
	"rtrim" "(" String ")" -> String {cons("String188Syn")}
	"List2K" List -> K {cons("K1277Syn")}
	"findString" "(" String "," String "," Int ")" -> Int {cons("Int172Syn")}
	"isSymbolicMap" "(" Map ")" -> K {cons("K1369Syn")}
	Ddigit -> Base {}
	"#reopen" "(" Int "," String ")" -> K {cons("K1377Syn")}
	"$hasMapping" "(" Map "," K ")" -> Bool {cons("Bool1247Syn")}


	DzDzString		-> DzString	{cons("DzString1Const")}
	DzDzInt		-> DzInt	{cons("DzInt1Const")}
	DzDzId		-> DzId	{cons("DzId1Const")}
	DzKLabel		-> KLabel	{cons("KLabel1Const")}
	DzDzBool		-> DzBool	{cons("DzBool1Const")}
	DzDzFloat		-> DzFloat	{cons("DzFloat1Const")}

	DzDzINT		-> DzDzInt
	DzDzID		-> DzDzId
	DzDzSTRING	-> DzDzString
	DzDzFLOAT	-> DzDzFloat
	":" -> DouaPuncteDz {cons("DouaPuncte")}

context-free restrictions
	DouaPuncteDz -/- [A-Z]

lexical syntax
	"true" -> DzDzBool
	"false" -> DzDzBool
	"isBinder" -> DzKLabel
	"wrap-with" -> DzKLabel
	"#set" -> DzKLabel
	"isSet" -> DzKLabel


%% sort predicates
	"isNumeral"      -> DzKLabel
	"isSymbolicNumeral"      -> DzKLabel
	"#symNumeral"      -> DzKLabel
	"isLetterOrDigit"      -> DzKLabel
	"isSymbolicLetterOrDigit"      -> DzKLabel
	"#symLetterOrDigit"      -> DzKLabel
	"isNoneStatement"      -> DzKLabel
	"isSymbolicNoneStatement"      -> DzKLabel
	"#symNoneStatement"      -> DzKLabel
	"isCapitalizedId"      -> DzKLabel
	"isSymbolicCapitalizedId"      -> DzKLabel
	"#symCapitalizedId"      -> DzKLabel
	"isArray"      -> DzKLabel
	"isSymbolicArray"      -> DzKLabel
	"#symArray"      -> DzKLabel
	"isGraphicCharacter"      -> DzKLabel
	"isSymbolicGraphicCharacter"      -> DzKLabel
	"#symGraphicCharacter"      -> DzKLabel
	"isKResult"      -> DzKLabel
	"isSymbolicKResult"      -> DzKLabel
	"#symKResult"      -> DzKLabel
	"isTCPAnswer"      -> DzKLabel
	"isSymbolicTCPAnswer"      -> DzKLabel
	"#symTCPAnswer"      -> DzKLabel
	"is#Float"      -> DzKLabel
	"isSymbolic#Float"      -> DzKLabel
	"#sym#Float"      -> DzKLabel
	"is#String"      -> DzKLabel
	"isSymbolic#String"      -> DzKLabel
	"#sym#String"      -> DzKLabel
	"isNumberal"      -> DzKLabel
	"isSymbolicNumberal"      -> DzKLabel
	"#symNumberal"      -> DzKLabel
	"isNonEndOfLineCharacterList"      -> DzKLabel
	"isSymbolicNonEndOfLineCharacterList"      -> DzKLabel
	"#symNonEndOfLineCharacterList"      -> DzKLabel
	"isExponent"      -> DzKLabel
	"isSymbolicExponent"      -> DzKLabel
	"#symExponent"      -> DzKLabel
	"isStringElementList"      -> DzKLabel
	"isSymbolicStringElementList"      -> DzKLabel
	"#symStringElementList"      -> DzKLabel
	"isDecimalRealLiteral"      -> DzKLabel
	"isSymbolicDecimalRealLiteral"      -> DzKLabel
	"#symDecimalRealLiteral"      -> DzKLabel
	"isDecimalIntegerLiteral"      -> DzKLabel
	"isSymbolicDecimalIntegerLiteral"      -> DzKLabel
	"#symDecimalIntegerLiteral"      -> DzKLabel
	"isPrositiveExponent"      -> DzKLabel
	"isSymbolicPrositiveExponent"      -> DzKLabel
	"#symPrositiveExponent"      -> DzKLabel
	"isSet"      -> DzKLabel
	"isSymbolicSet"      -> DzKLabel
	"#symSet"      -> DzKLabel
	"isInt"      -> DzKLabel
	"isSymbolicInt"      -> DzKLabel
	"#symInt"      -> DzKLabel
	"isIdentifier"      -> DzKLabel
	"isSymbolicIdentifier"      -> DzKLabel
	"#symIdentifier"      -> DzKLabel
	"is#Bool"      -> DzKLabel
	"isSymbolic#Bool"      -> DzKLabel
	"#sym#Bool"      -> DzKLabel
	"isBasedNumberal"      -> DzKLabel
	"isSymbolicBasedNumberal"      -> DzKLabel
	"#symBasedNumberal"      -> DzKLabel
	"isSpaceCharacter"      -> DzKLabel
	"isSymbolicSpaceCharacter"      -> DzKLabel
	"#symSpaceCharacter"      -> DzKLabel
	"isExtendedDigit"      -> DzKLabel
	"isSymbolicExtendedDigit"      -> DzKLabel
	"#symExtendedDigit"      -> DzKLabel
	"isVariable"      -> DzKLabel
	"isSymbolicVariable"      -> DzKLabel
	"#symVariable"      -> DzKLabel
	"isMap"      -> DzKLabel
	"isSymbolicMap"      -> DzKLabel
	"#symMap"      -> DzKLabel
	"isComment"      -> DzKLabel
	"isSymbolicComment"      -> DzKLabel
	"#symComment"      -> DzKLabel
	"isChar"      -> DzKLabel
	"isSymbolicChar"      -> DzKLabel
	"#symChar"      -> DzKLabel
	"isNonEndOfLineCharacter"      -> DzKLabel
	"isSymbolicNonEndOfLineCharacter"      -> DzKLabel
	"#symNonEndOfLineCharacter"      -> DzKLabel
	"isString"      -> DzKLabel
	"isSymbolicString"      -> DzKLabel
	"#symString"      -> DzKLabel
	"isIdentifierLeter"      -> DzKLabel
	"isSymbolicIdentifierLeter"      -> DzKLabel
	"#symIdentifierLeter"      -> DzKLabel
	"isKLabel"      -> DzKLabel
	"isSymbolicKLabel"      -> DzKLabel
	"#symKLabel"      -> DzKLabel
	"isList{K}"      -> DzKLabel
	"isSymbolicList{K}"      -> DzKLabel
	"#symList{K}"      -> DzKLabel
	"isSpecialCharacter"      -> DzKLabel
	"isSymbolicSpecialCharacter"      -> DzKLabel
	"#symSpecialCharacter"      -> DzKLabel
	"isId"      -> DzKLabel
	"isSymbolicId"      -> DzKLabel
	"#symId"      -> DzKLabel
	"isBag"      -> DzKLabel
	"isSymbolicBag"      -> DzKLabel
	"#symBag"      -> DzKLabel
	"isBase"      -> DzKLabel
	"isSymbolicBase"      -> DzKLabel
	"#symBase"      -> DzKLabel
	"isBool"      -> DzKLabel
	"isSymbolicBool"      -> DzKLabel
	"#symBool"      -> DzKLabel
	"isIdentifierLetter"      -> DzKLabel
	"isSymbolicIdentifierLetter"      -> DzKLabel
	"#symIdentifierLetter"      -> DzKLabel
	"isOtherControlCharacter"      -> DzKLabel
	"isSymbolicOtherControlCharacter"      -> DzKLabel
	"#symOtherControlCharacter"      -> DzKLabel
	"isNumericLiteral"      -> DzKLabel
	"isSymbolicNumericLiteral"      -> DzKLabel
	"#symNumericLiteral"      -> DzKLabel
	"is#Id"      -> DzKLabel
	"isSymbolic#Id"      -> DzKLabel
	"#sym#Id"      -> DzKLabel
	"isFormatEffector"      -> DzKLabel
	"isSymbolicFormatEffector"      -> DzKLabel
	"#symFormatEffector"      -> DzKLabel
	"isK"      -> DzKLabel
	"isSymbolicK"      -> DzKLabel
	"#symK"      -> DzKLabel
	"is#Int"      -> DzKLabel
	"isSymbolic#Int"      -> DzKLabel
	"#sym#Int"      -> DzKLabel
	"isRealLiteral"      -> DzKLabel
	"isSymbolicRealLiteral"      -> DzKLabel
	"#symRealLiteral"      -> DzKLabel
	"isDigit"      -> DzKLabel
	"isSymbolicDigit"      -> DzKLabel
	"#symDigit"      -> DzKLabel
	"isList"      -> DzKLabel
	"isSymbolicList"      -> DzKLabel
	"#symList"      -> DzKLabel
	"isDigitList"      -> DzKLabel
	"isSymbolicDigitList"      -> DzKLabel
	"#symDigitList"      -> DzKLabel
	"isStringLiteral"      -> DzKLabel
	"isSymbolicStringLiteral"      -> DzKLabel
	"#symStringLiteral"      -> DzKLabel
	"isFloat"      -> DzKLabel
	"isSymbolicFloat"      -> DzKLabel
	"#symFloat"      -> DzKLabel
	"isNat"      -> DzKLabel
	"isSymbolicNat"      -> DzKLabel
	"#symNat"      -> DzKLabel
	"isBasedIntegerLiteral"      -> DzKLabel
	"isSymbolicBasedIntegerLiteral"      -> DzKLabel
	"#symBasedIntegerLiteral"      -> DzKLabel
	"isStringElement"      -> DzKLabel
	"isSymbolicStringElement"      -> DzKLabel
	"#symStringElement"      -> DzKLabel
	"isCharacter"      -> DzKLabel
	"isSymbolicCharacter"      -> DzKLabel
	"#symCharacter"      -> DzKLabel
	"isNonQuotationMarkGraphicCharacter"      -> DzKLabel
	"isSymbolicNonQuotationMarkGraphicCharacter"      -> DzKLabel
	"#symNonQuotationMarkGraphicCharacter"      -> DzKLabel
	"isExtendedDigitList"      -> DzKLabel
	"isSymbolicExtendedDigitList"      -> DzKLabel
	"#symExtendedDigitList"      -> DzKLabel
	"isIntegerLiteral"      -> DzKLabel
	"isSymbolicIntegerLiteral"      -> DzKLabel
	"#symIntegerLiteral"      -> DzKLabel
	"isUnderLine"      -> DzKLabel
	"isSymbolicUnderLine"      -> DzKLabel
	"#symUnderLine"      -> DzKLabel
	"isLetterOrDigitList"      -> DzKLabel
	"isSymbolicLetterOrDigitList"      -> DzKLabel
	"#symLetterOrDigitList"      -> DzKLabel



%% terminals reject
	"Celllabel2K" -> VARID {reject}
	"String2KLabel" -> VARID {reject}
	"List2K" -> VARID {reject}
	"K2Sort" -> VARID {reject}
	"Float2Int" -> VARID {reject}
	"D" -> VARID {reject}
	"E" -> VARID {reject}
	"F" -> VARID {reject}
	"A" -> VARID {reject}
	"B" -> VARID {reject}
	"C" -> VARID {reject}
	"Vars2SMTLib" -> VARID {reject}
	"Set2KTerm" -> VARID {reject}
	"Map2K" -> VARID {reject}
	"K2SMTLib" -> VARID {reject}
	"String2DotK" -> VARID {reject}
	"Consts2SMTLib" -> VARID {reject}
	"Set2K" -> VARID {reject}
	"String2Int" -> VARID {reject}
	"Int2String" -> VARID {reject}
	"Map2KLabel" -> VARID {reject}
	"SMTLibQuery" -> VARID {reject}
	"String2Float" -> VARID {reject}
	"List2KLabel" -> VARID {reject}
	"String2Bool" -> VARID {reject}
	"String2Id" -> VARID {reject}
	"KLabel2K" -> VARID {reject}
	"Float2String" -> VARID {reject}
	"KLabel2String" -> VARID {reject}
	"Bag2KLabel" -> VARID {reject}
	"Bag2K" -> VARID {reject}
	"SMTCall" -> VARID {reject}
	"KLabel2KLabel" -> VARID {reject}
	"Set2KTermAcc" -> VARID {reject}
	"Id2String" -> VARID {reject}
	"Map" -> VARID {reject}
	"Int2Float" -> VARID {reject}
	"CellLabel2KLabel" -> VARID {reject}
	"Set2KLabel" -> VARID {reject}

lexical restrictions
	%% follow restrictions
	"-" -/- [I].[n].[t]
	"Set2K" -/- [T].[e].[r].[m]
	"#substitute" -/- [P].[l].[a].[i].[n].[L].[i].[s].[t].[\1]
	"#freeVars" -/- [B].[i].[n].[d].[e].[r].[\2]
	"#substitute" -/- [K]
	"#freshSym" -/- [S].[o].[r].[t]
	"#freeVars" -/- [B].[i].[n].[d].[e].[r].[\1]
	"#substitute" -/- [L].[i].[s].[t].[\1]
	"+" -/- [S].[t].[r].[i].[n].[g]
	"fresh" -/- [V].[a].[r].[i].[a].[b].[l].[e].[s]
	"-" -/- [S].[e].[t]
	"=/=K" -/- [L].[a].[b].[e].[l]
	"#" -/- [E].[O].[F]
	"#freshSym" -/- [N]
	"#freshSymSort" -/- [N]
	"#substitute" -/- [B].[i].[n].[d].[e].[r].[\1]
	"Map2K" -/- [L].[a].[b].[e].[l]
	"/" -/- [F].[l].[o].[a].[t]
	"#substitute" -/- [B].[i].[n].[d].[e].[r].[\2]
	"+" -/- [I].[n].[t]
	"#substitute" -/- [L].[i].[s].[t]
	"-" -/- [F].[l].[o].[a].[t]
	"#substitutePlain" -/- [L].[i].[s].[t]
	"#substitute" -/- [F].[V]
	"in" -/- [V].[a].[r].[s]
	"#substitute" -/- [B].[i].[n].[d].[e].[r]
	"Set2KTerm" -/- [A].[c].[c]
	"#freshSym" -/- [S].[o].[r].[t].[N]
	"#parse" -/- [T].[o].[k].[e].[n]
	"Set2K" -/- [L].[a].[b].[e].[l]
	"KLabel2K" -/- [L].[a].[b].[e].[l]
	"#substitute" -/- [P].[l].[a].[i].[n]
	"#substitutePlain" -/- [L].[i].[s].[t].[\1]
	"replace" -/- [F].[i].[r].[s].[t]
	"+" -/- [F].[l].[o].[a].[t]
	"#freeVars" -/- [B].[i].[n].[d].[e].[r]
	"#substitute" -/- [P].[l].[a].[i].[n].[L].[i].[s].[t]
	"Bag2K" -/- [L].[a].[b].[e].[l]
	"#eval" -/- [H].[e].[l].[p].[e].[r]
	"/" -/- [I].[n].[t]
	"List{K}2K" -/- [L].[a].[b].[e].[l]
	"replace" -/- [A].[l].[l]
	"#getVars" -/- [F].[r].[o].[m].[K]
	"Set2K" -/- [T].[e].[r].[m].[A].[c].[c]
	"==K" -/- [L].[a].[b].[e].[l]
	"List2K" -/- [L].[a].[b].[e].[l]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
	DzDzId  -/- [a-zA-Z0-9]
	DzDzInt -/- [0-9]
	"is" -/- [\#A-Z]

